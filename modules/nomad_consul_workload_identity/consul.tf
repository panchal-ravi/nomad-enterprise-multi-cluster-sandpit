locals {
  # tasks_role_prefix ensures that roles and binding rules are created with
  # compatible names. A mismatch can cause login requests to return 403 errors.
  tasks_role_prefix = "nomad-tasks"
  nomad_namespaces  = ["default", "api-dev"]
  consul_namespace  = "api-dev"
}

resource "consul_namespace" "ns" {
  name        = local.consul_namespace
  description = "Development namespace for api team"

  meta = {
    app = "api"
  }
}

resource "consul_acl_auth_method" "nomad" {
  name         = var.consul_auth_method_name
  display_name = var.consul_auth_method_name
  description  = "JWT auth method for Nomad services and workloads"
  type         = "jwt"

  config_json = jsonencode({
    JWKSURL          = "${var.nomad_http_addr}/.well-known/jwks.json"
    JWTSupportedAlgs = ["RS256"]
    JWKSCACert       = trimspace(var.nomad_ca_cert)
    BoundAudiences   = ["consul.io"]
    ClaimMappings = {
      nomad_namespace = "nomad_namespace"
      nomad_job_id    = "nomad_job_id"
      nomad_task      = "nomad_task"
      nomad_service   = "nomad_service"

      # The consul_namespace claim is only available when using Consul 
      # and Nomad Enterprise.
      consul_namespace = "consul_namespace"
    }
  })

  namespace_rule {
    bind_namespace = "$${value.consul_namespace}"
    selector       = "\"consul_namespace\" in value"
  }

  # Note: you should not set a max_token_ttl value for the auth method since
  # Consul ACL tokens cannot be renewed and Nomad expects them to live for as
  # long as the allocation runs. Nomad automatically invalidates the tokens it
  # generates when the allocation stops.
}
resource "consul_acl_binding_rule" "services" {
  auth_method = consul_acl_auth_method.nomad.name
  description = "Binding rule for services registered from Nomad"
  bind_type   = "service"

  # bind_name matches the pattern used by Nomad to register services in Consul
  # and should not be modified.
  bind_name = "$${value.nomad_service}"

  # selector ensures this binding rule is only applied to workload identities
  # for services, not tasks.
  selector = "\"nomad_service\" in value"
}

# consul_acl_binding_rule.tasks binds consul_acl_auth_method.nomad to a role
# in order to specify the permissions granted to tokens generated by the auth
# method.
#
# Refer to Consul's documentation on binding rules for more information.
# https://developer.hashicorp.com/consul/docs/security/acl/auth-methods#binding-rules
resource "consul_acl_binding_rule" "tasks" {
  auth_method = consul_acl_auth_method.nomad.name
  description = "Binding rule for Nomad tasks"
  bind_type   = "role"

  # bind_name must match the name of an ACL role to apply to tokens. You may
  # reference values from the ClaimMappings configured in the auth method to
  # make the selection more dynamic.
  #
  # Refer to Consul's documentation on claim mappings for more information.
  # https://developer.hashicorp.com/consul/docs/security/acl/auth-methods/jwt#trusted-identity-attributes-via-claim-mappings
  bind_name = "${local.tasks_role_prefix}-$${value.nomad_namespace}"

  # selector ensures this binding rule is only applied to workload identities
  # for tasks, not services.
  selector = "\"nomad_service\" not in value"
}

# consul_acl_role.tasks is the ACL role that attaches a set of policies and
# permissions to tokens.
#
# Refer to Consul's documentation on ACL roles for more information.
# https://developer.hashicorp.com/consul/docs/security/acl/acl-roles
resource "consul_acl_role" "tasks" {
  # As an example, this module creates different roles for each Nomad namespace
  # to illustrate the use of claim mappings attributes, but this can be
  # adjusted as needed in a real cluster.
  for_each = toset(local.nomad_namespaces)

  name      = "${local.tasks_role_prefix}-${each.key}"
  namespace = each.key

  description = "ACL role for Nomad tasks in the ${each.key} Nomad namespace"
  policies    = [consul_acl_policy.tasks[each.key].id]
}

# consul_acl_policy.tasks is a sample ACL policy that grants tokens read access
# to Consul's service catalog and KV storage.
#
# This is the policy used in consul_acl_role.tasks if the variable
# tasks_policy_ids is not set.
resource "consul_acl_policy" "tasks" {
  for_each    = toset(local.nomad_namespaces)
  name        = "nomad-tasks"
  description = "ACL policy used by Nomad tasks"
  namespace   = each.key
  rules       = <<EOF
key_prefix "" {
  policy = "read"
}

service_prefix "" {
  policy = "read"
}
EOF
  depends_on  = [consul_namespace.ns]
}
